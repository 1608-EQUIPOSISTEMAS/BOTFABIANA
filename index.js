const fs = require("fs");
const path = require("path");
const { MessageMedia } = require("whatsapp-web.js");

const { enviarHorarios } = require("./src/services/enviarHorarios");
const { crearCliente } = require("./src/bot/cliente");
const { normalizarTexto } = require("./src/utils/normalizar");
const { encontrarPrograma } = require("./src/services/encontrarPrograma");

// --- ‚ùóÔ∏è REDES DE SEGURIDAD GLOBALES ‚ùóÔ∏è ---
// Capturan errores inesperados que podr√≠an "tumbar" el script.
process.on('unhandledRejection', (reason, promise) => {
    console.error('=============== ‚ùóÔ∏è RECHAZO DE PROMESA NO MANEJADO ‚ùóÔ∏è ===============');
    console.error('Raz√≥n:', reason);
    console.error('===================================================================');
});

process.on('uncaughtException', (error) => {
    console.error('=============== ‚ùóÔ∏è EXCEPCI√ìN NO CAPTURADA ‚ùóÔ∏è ===============');
    console.error('Error:', error);
    console.error('============================================================');
    // Salir es lo recomendado para que PM2 reinicie el script de forma limpia
    process.exit(1);
});
// ---------------------------------------------

// --- INICIALIZACI√ìN DE SERVIDOR Y CLIENTE ---
const { iniciarServidor } = require("./src/dashboard/server");
iniciarServidor(); // Inicia el servidor

const client = crearCliente();
let estadoUsuarios = {}; // üîπ Estado para seguir conversaciones (es 'let')

// --- CONFIGURACI√ìN DE RUTAS ---
const projectRoot = process.cwd();
const mediaPath = path.join(projectRoot, 'media');

const PATHS = {
    ESTADOS: path.join(projectRoot, "src", "database", "estados.json"),
    PROGRAMAS: path.join(projectRoot, "src", "database", "programas.json"),
    PLUS: path.join(projectRoot, "src", "database", "plus.json"),
    SALUDOS: path.join(projectRoot, "src", "database", "saludos.json"),
    PERFIL: path.join(projectRoot, "src", "database", "perfil.json"),
    CTA: path.join(projectRoot, "src", "database", "cta.json"),
};

// --- ESTRUCTURA DE DATOS EN MEMORIA ---
let programasData = [];
let plusData = {};
let saludosData = {};
let perfilData = {};
let ctaData = {};

// --- MANEJO DE ESTADO PERSISTENTE ---
function loadEstados() {
    try {
        if (fs.existsSync(PATHS.ESTADOS)) {
            const data = fs.readFileSync(PATHS.ESTADOS, "utf8");
            estadoUsuarios = JSON.parse(data);
            console.log("‚úÖ Estados de usuario cargados correctamente.");
        } else {
            console.log("‚ÑπÔ∏è No se encontr√≥ 'estados.json'. Iniciando vac√≠o.");
            estadoUsuarios = {};
        }
    } catch (error) {
        console.error("‚ùå Error cargando estados.json. Iniciando vac√≠o:", error.message);
        estadoUsuarios = {};
    }
}

async function saveEstados() {
    try {
        await fs.promises.writeFile(PATHS.ESTADOS, JSON.stringify(estadoUsuarios, null, 2), "utf8");
    } catch (err) {
        console.error("‚ùå Error guardando estados.json:", err.message);
    }
}

// --- CARGA DE DATOS ---
function loadAllData() {
    try {
        programasData = JSON.parse(fs.readFileSync(PATHS.PROGRAMAS, "utf8"));
        plusData = JSON.parse(fs.readFileSync(PATHS.PLUS, "utf8"));
        saludosData = JSON.parse(fs.readFileSync(PATHS.SALUDOS, "utf8"));
        perfilData = JSON.parse(fs.readFileSync(PATHS.PERFIL, "utf8"));
        ctaData = JSON.parse(fs.readFileSync(PATHS.CTA, "utf8"));
        console.log("‚úÖ Todos los datos JSON cargados correctamente en memoria.");
    } catch (error) {
        console.error("‚ùå Error al cargar datos JSON:", error.message);
        perfilData = {
            texto: "üö® *Para asesorarte y brindarte la INVERSI√ìN del programa, por favor ind√≠came tu perfil:* \n1) Soy egresado...\n5) Soy independiente"
        };
    }
}

// --- FUNCI√ìN DE UTILIDAD: DENTRO DE HORARIO ---
function estaDentroHorario() {
    const ahora = new Date();
    const opciones = { timeZone: "America/Lima", hour: "2-digit", hour12: false, weekday: "long" };
    const horaPeru = parseInt(ahora.toLocaleString("es-PE", opciones), 10);
    const dia = ahora.toLocaleDateString("es-PE", { timeZone: "America/Lima", weekday: "long" }).toLowerCase();
    const esFinDeSemana = (dia === "s√°bado" || dia === "domingo");
    if (!esFinDeSemana && horaPeru >= 9 && horaPeru < 18) { return true; }
    if (esFinDeSemana && horaPeru >= 9 && horaPeru < 13) { return true; }
    return false;
}

// --- ‚ú® NUEVA FUNCI√ìN REFACTORIZADA ---
// Agrupa el env√≠o de los 6 mensajes iniciales
async function enviarBloqueInfo(numero, p) {
    if (saludosData?.texto) await client.sendMessage(numero, saludosData.texto);
    if (p.PERSONALIZADO) await client.sendMessage(numero, p.PERSONALIZADO);

    const videoPath = p.VIDEO ? path.join(mediaPath, p.VIDEO) : null;
    const imagePath = p.POSTDOCEN ? path.join(mediaPath, p.POSTDOCEN) : null;
    const pdfPath = p.BROCHURE ? path.join(mediaPath, p.BROCHURE) : null;

    if (videoPath && fs.existsSync(videoPath)) {
        await client.sendMessage(numero, MessageMedia.fromFilePath(videoPath));
    } else if (imagePath && fs.existsSync(imagePath)) {
        await client.sendMessage(numero, MessageMedia.fromFilePath(imagePath));
    }

    if (p.BENEFICIOS) await client.sendMessage(numero, p.BENEFICIOS);

    if (pdfPath && fs.existsSync(pdfPath)) {
        await client.sendMessage(numero, MessageMedia.fromFilePath(pdfPath));
    }

    await enviarHorarios(client, numero, p.PROGRAMA);

    const perfilMsg = perfilData?.texto || "üö® *Para asesorarte y brindarte la INVERSI√ìN del programa, por favor ind√≠came tu perfil...*";
    await client.sendMessage(numero, perfilMsg);
}
// ----------------------------------------

// üö® Cargar datos al inicio del bot
loadAllData();
loadEstados();
// -----------------------------------------------------

client.on("message", async (message) => {
    try {
        if (message.from.includes("@g.us") || message.from.includes("@broadcast") || message.type !== "chat") {
            return;
        }

        const textoOriginal = (message.body || "").trim();
        const texto = normalizarTexto(textoOriginal);
        const numero = message.from;
        const nombre = message._data?.notifyName || "Sin nombre";

        const opciones = { timeZone: 'America/Lima', hour12: false, year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' };
        const fechaYHoraPeru = new Date().toLocaleString('es-PE', opciones);
        console.log(`\n[${fechaYHoraPeru}] üì© Mensaje de ${nombre} (${numero}): ${textoOriginal}`);

        // -----------------------------------------------------------------
        // --- ‚ùóÔ∏è FLUJO 0: INICIO O REINICIO DE CONVERSACI√ìN (M√ÅXIMA PRIORIDAD) ---
        // -----------------------------------------------------------------
        if (texto.includes("hola, estoy en") || texto.includes("info") || texto.includes("informaci√≥n") || texto.includes("facilitar") || texto.includes("quiero") || texto.includes("quisiera")) {
            const resultados = encontrarPrograma(textoOriginal, programasData);

            if (resultados.length === 1) {
                const p = resultados[0];

                // 1. Guardar estado temporal ANTES de enviar
                estadoUsuarios[numero] = {
                    estado: "enviandoInfo", // Estado temporal
                    nombrePrograma: p.PROGRAMA,
                    edicion: p.EDICION,
                    categoria: (p.CATEGORIA || "").toUpperCase()
                };
                await saveEstados();
                console.log(`[FLOW 0] Estado 'enviandoInfo' guardado para ${numero}.`);

                // 2. Intentar enviar el bloque completo
                try {
                    await enviarBloqueInfo(numero, p);
                } catch (sendError) {
                    console.error(`‚ùå Falla al enviar bloque de info a ${numero}. El estado persiste como 'enviandoInfo'.`, sendError);
                    return; // Salir. El estado ya est√° guardado como "enviandoInfo".
                }

                // 3. Si TODO sali√≥ bien, guardar estado FINAL
                estadoUsuarios[numero].estado = "esperandoPerfil";
                await saveEstados();
                console.log(`[FLOW 0] Bloque enviado OK. Estado 'esperandoPerfil' guardado para ${numero}.`);
                return;
            }

            // -----------------------------------------------------------------
            // --- ‚ùóÔ∏è FLUJO 0.5: REINTENTO POR FALLO DE ENV√çO ---
            // -----------------------------------------------------------------
        } else if (estadoUsuarios[numero]?.estado === "enviandoInfo") {
            // El usuario NO escribi√≥ "info", pero su estado SIGUE en "enviandoInfo".
            // Esto significa que el env√≠o anterior fall√≥ y el usuario est√° atascado.
            console.warn(`[FLOW 0.5] Detectado estado 'enviandoInfo' para ${numero} con texto: '${texto}'. Reintentando env√≠o...`);

            const { nombrePrograma, edicion } = estadoUsuarios[numero];
            const p = programasData.find(
                (pr) => normalizarTexto(pr.PROGRAMA) === normalizarTexto(nombrePrograma) &&
                    normalizarTexto(pr.EDICION) === normalizarTexto(edicion)
            );

            if (!p) {
                console.error(`[FLOW 0.5] No se pudo encontrar el programa ${nombrePrograma} para el reintento.`);
                delete estadoUsuarios[numero];
                await saveEstados();
                return;
            }

            // 1. Reintentar enviar el bloque completo
            try {
                await enviarBloqueInfo(numero, p);
            } catch (sendError) {
                console.error(`‚ùå Falla en el REINTENTO de env√≠o a ${numero}. El estado persiste como 'enviandoInfo'.`, sendError);
                return; // Salir. Esperar otro mensaje del usuario para reintentar.
            }

            // 2. Si el REINTENTO sali√≥ bien, guardar estado FINAL
            estadoUsuarios[numero].estado = "esperandoPerfil";
            await saveEstados();
            console.log(`[FLOW 0.5] Reintento enviado OK. Estado 'esperandoPerfil' guardado para ${numero}.`);

            // 3. IMPORTANTE: NO hacemos 'return'.
            // Dejamos que el c√≥digo contin√∫e al siguiente 'else if'
            // para procesar el mensaje actual (ej. "1") con el estado ya corregido.
        }

        // -----------------------------------------------------------------
        // --- FLUJO 1: ESPERANDO PERFIL (Respuesta 1-5) ---
        // -----------------------------------------------------------------
        else if (estadoUsuarios[numero]?.estado === "esperandoPerfil") {
            const { nombrePrograma, edicion } = estadoUsuarios[numero];
            const p = programasData.find(
                (pr) => normalizarTexto(pr.PROGRAMA) === normalizarTexto(nombrePrograma) &&
                    normalizarTexto(pr.EDICION) === normalizarTexto(edicion)
            );

            if (!p) {
                delete estadoUsuarios[numero];
                await saveEstados();
                return;
            }

            let resKeyName = "";
            switch (texto) {
                case "1": resKeyName = "RES1"; break;
                case "2": resKeyName = "RES2"; break;
                case "3": resKeyName = "RES3"; break;
                case "4": resKeyName = "RES4"; break;
                case "5": resKeyName = "RES5"; break;
                default:
                    console.log(`[FLOW 1] Respuesta inv√°lida para 'esperandoPerfil': ${texto}`);
                    return; // No hacer nada, esperar respuesta 1-5
            }

            const resValue = p[resKeyName];
            if (resValue) {
                await client.sendMessage(numero, resValue);
            }

            const esEstudiante = texto === "3" || texto === "4";
            const esCurso = (p.CATEGORIA || "").toUpperCase() === "CURSO";
            let inversionMsg = "";

            // ‚úÖ INICIO: L√ìGICA COMPLETA DE INVERSI√ìN (RESTAURADA)
            if (esCurso) {
                if (esEstudiante) {
                    inversionMsg = `*Hasta el Viernes 31 de Octubre HalloW|E üëªüéÉ*

Opciones de pago:
1Ô∏è‚É£ *Al Contado* Ahorro m√°ximoüòâ
üî•55% Dcto > S/ ${p["EXEST"]} ~(Normal S/ ${p["INV EST T"]})~

2Ô∏è‚É£ *En Cuotas sin intereses*
50% Dcto > S/ ${p["INV EST"]} ~(Normal S/ ${p["INV EST T"]})~
üí≥ Reserva con S/ ${p["RESEST"]}

*La inversi√≥n incluye el CERTIFICADO* üìö`;
                } else {
                    inversionMsg = `*Hasta el Viernes 31 de Octubre HalloW|E üëªüéÉ*

Opciones de pago:
1Ô∏è‚É£ *Al Contado* Ahorro m√°ximoüòâ
üî•55% Dcto > S/ ${p["EXPRO"]} ~(Normal S/ ${p["INV PRO T"]})~

2Ô∏è‚É£ *En Cuotas sin intereses*
50% Dcto > S/ ${p["INV PRO"]} ~(Normal S/ ${p["INV PRO T"]})~
üí≥ Reserva con S/ ${p["RESPRO"]}

*La inversi√≥n incluye el CERTIFICADO* üìö`;
                }
            } else {
                // Es un "Programa" (no un Curso)
                if (esEstudiante) {
                    inversionMsg = `*Hasta el Viernes 31 de Octubre HalloW|E üëªüéÉ*

Facilidades de pago:
1Ô∏è‚É£ *En Cuotas sin Intereses* 
üî•50% Dcto > S/ ${p["INV EST"]} ~(Normal S/ ${p["INV EST T"]})~
üí≥ Reserva con S/ ${p["RESEST"]}

2Ô∏è‚É£ *Al Contado* Ahorro m√°ximoüòâ
üî•55% Dcto > S/ ${p["EXEST"]} ~(Normal S/ ${p["INV EST T"]})~

*La inversi√≥n incluye el CERTIFICADO* üìö`;
                } else {
                    // Profesional (no estudiante)
                    inversionMsg = `*Hasta el Viernes 31 de Octubre HalloW|E üëªüéÉ*

Facilidades de pago:
1Ô∏è‚É£ *En Cuotas sin Intereses* 
üî•50% Dcto > S/ ${p["INV PRO"]} ~(Normal S/ ${p["INV PRO T"]})~
üí≥ Reserva con S/ ${p["RESPRO"]}

2Ô∏è‚É£ *Al Contado* Ahorro m√°ximoüòâ
üî•55% Dcto > S/ ${p["EXPRO"]} ~(Normal S/ ${p["INV PRO T"]})~

*La inversi√≥n incluye el CERTIFICADO* üìö`;
                }
            }
            // ‚úÖ FIN: L√ìGICA COMPLETA DE INVERSI√ìN (RESTAURADA)
            // ... (FIN L√≥gica de INVERSI√ìN)

            await client.sendMessage(numero, inversionMsg);

            if (plusData?.texto) await client.sendMessage(numero, plusData.texto);
            if (ctaData?.texto) await client.sendMessage(numero, ctaData.texto);

            // Actualizar estado para la siguiente decisi√≥n
            estadoUsuarios[numero] = {
                estado: "esperandoDecision",
                nombrePrograma: p.PROGRAMA,
                edicion: p.EDICION,
                esEstudiante,
                categoria: (p.CATEGORIA || "").toUpperCase()
            };
            await saveEstados();
            return;
        }

        // -----------------------------------------------------------------
        // --- FLUJO 2: ESPERANDO DECISI√ìN (Despu√©s de la Inversi√≥n) ---
        // -----------------------------------------------------------------
        else if (estadoUsuarios[numero]?.estado === "esperandoDecision") {
            const msgFuera = "‚ú® Genial, en un momento un asesor se comunicar√° contigo para resolver tus consultas üòÑ";
            const msgDentro = "‚è∞ ¬°Estamos contentos de poder ayudarte en tu elecci√≥n! Un asesor se comunicar√° contigo el d√≠a de *ma√±ana*. Por favor, ind√≠came un *horario* para que se contacte contigo. üôãüèª‚Äç‚ôÄÔ∏è";

            switch (texto) {
                case "1":
                case "2": // Opci√≥n de inscripci√≥n
                    await client.sendMessage(numero, `*¬°Perfecto!* La inscripci√≥n es muy sencilla üòá\n\nContamos con los siguientes M√âTODOS DE PAGOüëáüèª\n\n1Ô∏è‚É£ Yape üì≤\n2Ô∏è‚É£ Dep√≥sito o transferencia bancaria üèõÔ∏è\n3Ô∏è‚É£ Pago online v√≠a Web üåê(Aceptamos todas las tarjetas üí≥)\n\nCom√©ntame *¬øCu√°l ser√≠a tu mejor opci√≥n de pago?* üòä`);
                    estadoUsuarios[numero].estado = "esperandoMetodoPago";
                    await saveEstados();
                    return;
                case "3":
                case "4": // Opci√≥n de llamada/asesor√≠a
                    await client.sendMessage(numero, estaDentroHorario() ? msgDentro : msgFuera);
                    delete estadoUsuarios[numero];
                    await saveEstados();
                    return;
                default:
                    console.log(`[FLOW 2] Respuesta inv√°lida para 'esperandoDecision': ${texto}`);
                    return; // No hacer nada, esperar respuesta 1-4
            }
        }

        // -----------------------------------------------------------------
        // --- FLUJO 3: ESPERANDO M√âTODO DE PAGO ---
        // -----------------------------------------------------------------
        else if (estadoUsuarios[numero]?.estado === "esperandoMetodoPago") {
            const { nombrePrograma, edicion } = estadoUsuarios[numero];
            const p = programasData.find(
                (pr) => normalizarTexto(pr.PROGRAMA) === normalizarTexto(nombrePrograma) &&
                    normalizarTexto(pr.EDICION) === normalizarTexto(edicion)
            );

            if (!p) {
                delete estadoUsuarios[numero];
                await saveEstados();
                return;
            }

            const esEstudiante = estadoUsuarios[numero].esEstudiante;
            const esCurso = (estadoUsuarios[numero].categoria || "CURSO") === "CURSO";
            const datosMsg = esEstudiante ?
                `*Br√≠ndame por favor, los siguientes datos*:\n\nüîπDNI o C√âDULA:\nüîπNombre completo:\nüîπN√∫mero de Celular:\nüîπFecha de Inicio:\nüîπCorreo (Gmail):\nüîπFoto de Voucher:\nüîπFoto de Intranet o Carnet Universitario:\n\nY listo! üåü Cuando realices el pago y env√≠o de tus datos, me avisas para comentarte los siguientes detalles. üôãüèª‚Äç‚ôÄÔ∏èüíô` :
                `*Br√≠ndame por favor, los siguientes datos*:\n\nüîπDNI o C√âDULA:\nüîπNombre completo:\nüîπN√∫mero de Celular:\nüîπFecha de Inicio:\nüîπCorreo (Gmail):\nüîπFoto de Voucher:\n\nY listo! üåü Cuando realices el pago y env√≠o de tus datos, me avisas para comentarte los siguientes detalles. üôãüèª‚Äç‚ôÄÔ∏èüíô`;

            // --- Pago 1: Yape ---
            if (texto.includes("1") || texto.includes("yape")) {
                await client.sendMessage(numero, `*Perfecto* ‚ú®\n\nTe env√≠o el n√∫mero de Yape y C√≥digo QR üëá\n\nüì≤ 999 606 366 // WE Educaci√≥n Ejecutiva`);
                const nombreYape = esCurso ? "yapecursos.jpeg" : "yapeprog.jpeg";
                const rutaQR = path.join(mediaPath, "pago", nombreYape);
                if (fs.existsSync(rutaQR)) {
                    await client.sendMessage(numero, MessageMedia.fromFilePath(rutaQR));
                }
                await client.sendMessage(numero, datosMsg);
                delete estadoUsuarios[numero];
                await saveEstados();
                return;
            }

            // --- Pago 2: Dep√≥sito o Transferencia ---
            if (texto.includes("2") || texto.includes("bcp") || texto.includes("deposito") || texto.includes("transferencia")) {
                const mensajeDepo = esCurso ?
                    `¬°Excelente! Te comparto los datos de nuestra cuenta... *Titular*: WE Foundation` :
                    `¬°Excelente! Te comparto los datos de nuestra cuenta... *Titular*: WE Educaci√≥n Ejecutiva SAC`;
                await client.sendMessage(numero, mensajeDepo);
                await client.sendMessage(numero, datosMsg);
                delete estadoUsuarios[numero];
                await saveEstados();
                return;
            }

            // --- Pago 3: Web ---
            if (texto.includes("3") || texto.includes("web")) {
                if (!p.ENLACE) {
                    delete estadoUsuarios[numero];
                    await saveEstados();
                    return;
                }
                const mensajeTexto = `üëâ ‚ÄúPerfecto, puedes hacer tu pago de manera r√°pida y 100% segura...\n\nüîó ${p["ENLACE"]}\n\n...`;
                await client.sendMessage(numero, mensajeTexto);
                const rutaVideo = path.join(mediaPath, "videos", "WEB.mp4");
                if (fs.existsSync(rutaVideo)) {
                    await client.sendMessage(numero, MessageMedia.fromFilePath(rutaVideo));
                }
                estadoUsuarios[numero].estado = "esperandoDecisionWeb";
                await saveEstados();
                const followUpMessage = `üí≥ Cuentame, ¬øPudiste completar tu pago en el link web? üåê\n\n1Ô∏è‚É£ S√≠, todo correcto üôå\n2Ô∏è‚É£ A√∫n no, necesito ayuda ü§î`;
                setTimeout(async () => {
                    try {
                        if (estadoUsuarios[numero]?.estado === "esperandoDecisionWeb") {
                            await client.sendMessage(numero, followUpMessage);
                            console.log(`‚úÖ Mensaje de seguimiento enviado a ${numero}.`);
                        }
                    } catch (error) {
                        console.error(`‚ùå Error en el setTimeout para follow-up de ${numero}:`, error);
                    }
                }, 3 * 60 * 1000); // 3 minutos
                return;
            }

            console.log(`[FLOW 3] Respuesta inv√°lida para 'esperandoMetodoPago': ${texto}`);
            return; // No hacer nada, esperar respuesta 1-3
        }

        // -----------------------------------------------------------------
        // --- FLUJO 4: ESPERANDO DECISI√ìN WEB ---
        // -----------------------------------------------------------------
        else if (estadoUsuarios[numero]?.estado === "esperandoDecisionWeb") {
            if (texto === "1") {
                await client.sendMessage(numero, `*¬°Ya te hemos registrado al Programa!* üöÄ\nRecuerda tener en cuenta lo siguiente üíôüëáüèª`);
                const IMAGEN_REGISTRO_PATH = path.join(mediaPath, "pago", "webins.jpg");
                if (fs.existsSync(IMAGEN_REGISTRO_PATH)) {
                    await client.sendMessage(numero, MessageMedia.fromFilePath(IMAGEN_REGISTRO_PATH));
                } else {
                    console.log("‚ö†Ô∏è No se encontr√≥ la imagen de registro completo.");
                }
                await client.sendMessage(numero, `*Bienvenid@ a la Comunidad WE* üíô\n¬°Que disfrutes tu programa!\n\nüì≤ *Ag√©ndanos en tus contactos* ...\n\nüë©üèª‚Äçüíª *Eval√∫a nuestra atenci√≥n* üëâüèº bit.ly/4azD6Z4\n\nüë• *√önete a nuestra Comunidad WE* üëâüèº bit.ly/COMUNIDAD_WE \n\n¬°Gracias por confiar en WE! üöÄ`);
                await client.sendMessage(numero, `üíé *Beneficio Exclusivo* üíé\n\nPor tu inscripci√≥n, adquiere la MEMBRES√çA PLUS...\n\n _V√°lido por 3 d√≠as_ üìç`);
                delete estadoUsuarios[numero];
                await saveEstados();
                return;

            } else if (texto === "2") {
                const msgFuera = "‚ú® Genial, en un momento un asesor se comunicar√° contigo para resolver tus consultas üòÑ";
                const msgDentro = "‚è∞ ¬°Estamos contentos de poder ayudarte en tu elecci√≥n! Un asesor se comunicar√° contigo el d√≠a de *ma√±ana*. Por favor, ind√≠came un *horario* para que se contacte contigo. üôãüèª‚Äç‚ôÄÔ∏è";
                await client.sendMessage(numero, estaDentroHorario() ? msgDentro : msgFuera);
                delete estadoUsuarios[numero];
                await saveEstados();
                return;
            } else {
                console.log(`[FLOW 4] Respuesta inv√°lida para 'esperandoDecisionWeb': ${texto}`);
                return; // No hacer nada, esperar respuesta 1-2
            }
        }

    } catch (error) {
        console.error("‚ùå Error procesando mensaje:", error);
        // El 'listener' global 'uncaughtException' se encargar√° si el error es fatal.
        // Este catch maneja errores de promesas dentro del 'on message'
        if (error.message.includes('Protocol error (Runtime.callFunctionOn)')) {
            console.log("üö® Reintentando inicializar el cliente de WhatsApp en 10 segundos...");
            setTimeout(() => {
                client.initialize();
            }, 10000);
        }
    }
});

client.initialize();